name: fetch-images

on:
  schedule:
    - cron: "30 */6 * * *"   # 6시간마다(UTC)
  workflow_dispatch: {}      # 수동 실행 허용

permissions:
  contents: write

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare folders
        shell: bash
        run: |
          mkdir -p images
          test -f images/catalog.json || echo '{"files":[]}' > images/catalog.json
          echo "Prepared images folder and catalog.json"

      - name: Download images
        shell: bash
        run: |
          set -euo pipefail
          URLS=(
            "https://backend.wplace.live/files/s0/tiles/1738/786.png"
            "https://backend.wplace.live/files/s0/tiles/1738/787.png"
            "https://backend.wplace.live/files/s0/tiles/1738/788.png"
            "https://backend.wplace.live/files/s0/tiles/1738/789.png"
            "https://backend.wplace.live/files/s0/tiles/1738/790.png"
            "https://backend.wplace.live/files/s0/tiles/1738/791.png"

            "https://backend.wplace.live/files/s0/tiles/1739/786.png"
            "https://backend.wplace.live/files/s0/tiles/1739/787.png"
            "https://backend.wplace.live/files/s0/tiles/1739/788.png"
            "https://backend.wplace.live/files/s0/tiles/1739/789.png"
            "https://backend.wplace.live/files/s0/tiles/1739/790.png"
            "https://backend.wplace.live/files/s0/tiles/1739/791.png"

            "https://backend.wplace.live/files/s0/tiles/1740/786.png"
            "https://backend.wplace.live/files/s0/tiles/1740/787.png"
            "https://backend.wplace.live/files/s0/tiles/1740/788.png"
            "https://backend.wplace.live/files/s0/tiles/1740/789.png"
            "https://backend.wplace.live/files/s0/tiles/1740/790.png"
            "https://backend.wplace.live/files/s0/tiles/1740/791.png"
            
            "https://backend.wplace.live/files/s0/tiles/1741/786.png"
            "https://backend.wplace.live/files/s0/tiles/1741/787.png"
            "https://backend.wplace.live/files/s0/tiles/1741/788.png"
            "https://backend.wplace.live/files/s0/tiles/1741/789.png"
            "https://backend.wplace.live/files/s0/tiles/1741/790.png"
            "https://backend.wplace.live/files/s0/tiles/1741/791.png"
            
            "https://backend.wplace.live/files/s0/tiles/1742/786.png"
            "https://backend.wplace.live/files/s0/tiles/1742/787.png"
            "https://backend.wplace.live/files/s0/tiles/1742/788.png"
            "https://backend.wplace.live/files/s0/tiles/1742/789.png"
            "https://backend.wplace.live/files/s0/tiles/1742/790.png"
            "https://backend.wplace.live/files/s0/tiles/1742/791.png"
            
            "https://backend.wplace.live/files/s0/tiles/1743/786.png"
            "https://backend.wplace.live/files/s0/tiles/1743/787.png"
            "https://backend.wplace.live/files/s0/tiles/1743/788.png"
            "https://backend.wplace.live/files/s0/tiles/1743/789.png"
            "https://backend.wplace.live/files/s0/tiles/1743/790.png"
            "https://backend.wplace.live/files/s0/tiles/1743/791.png"
          )
            DAYTIM="$(TZ=Asia/Seoul date +'%Y%m%d_%H%M%S')"

            for u in "${URLS[@]}"; do
              path="${u#*/tiles/}"
              AREA="${path%%/*}"
              COORD="${path#*/}"
              Y="${COORD%.*}"
              folder="${AREA}x${Y}"
              name="${DAYTIM}_${folder}.png"
              dir_path="images/${folder}"
              output_path="${dir_path}/${name}"

              mkdir -p "${dir_path}"

              if curl -L --fail --silent --show-error -o "$output_path" "$u"; then
                echo "Saved $output_path"
              else
                echo "Download failed or empty for $u" >&2
                exit 1
              fi
            done

      - name: Update catalog.json
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const crypto = require('crypto');
          const dir = 'images';
          const catalogPath = path.join(dir, 'catalog.json');
          let catalog = { files: [] };
          if (fs.existsSync(catalogPath)) {
            try { catalog = JSON.parse(fs.readFileSync(catalogPath, 'utf8') || '{"files":[]}'); }
            catch { catalog = { files: [] }; }
          }

          function getFilesInDirectory(dirPath) {
              let results = [];
              const files = fs.readdirSync(dirPath);
              for (const file of files) {
                  const filePath = path.join(dirPath, file);
                  const stat = fs.statSync(filePath);
                  if (stat.isDirectory()) {
                      results = results.concat(getFilesInDirectory(filePath));
                  } else if (/\.(png|jpg|jpeg|gif|webp)$/i.test(file)) {
                      results.push(filePath);
                  }
              }
              return results;
          }

          const allImageFiles = getFilesInDirectory(dir);
          const known = new Set(catalog.files.map(x => x.name));
          for (const p of allImageFiles) {
              const relativePath = path.relative(dir, p).replace(/\\/g, '/');
              if (!known.has(relativePath)) {
                  try {
                      const sha = crypto.createHash('md5').update(fs.readFileSync(p)).digest('hex').slice(0, 12);
                      catalog.files.push({ name: relativePath, sha, ts: new Date().toISOString() });
                  } catch(e) {
                      console.error(`Failed to process file ${p}: ${e.message}`);
                  }
              }
          }
          catalog.files = catalog.files.sort((a,b)=>a.name.localeCompare(b.name)).slice(-2000);
          fs.writeFileSync(catalogPath, JSON.stringify(catalog, null, 2));
          console.log('files in catalog:', catalog.files.length);
          NODE

      - name: Commit and push if changed
        shell: bash
        run: |
          git config user.email "actions@users.noreply.github.com"
          git config user.name "github-actions"
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "chore: fetch images and trim to 24 per folder [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi
